import java.util.*;
class BinaryTreeM{
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    static class BinaryTree{
        static int idx=-1;
        static Node treeBuilder(int[] nodes){
            idx++;
            if(nodes[idx]==-1){
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = treeBuilder(nodes);
            newNode.right = treeBuilder(nodes);
            return newNode;
        }
        static void preOrder(Node root){
            if(root==null){
                System.out.print("-1 ");
                return;
            }
            System.out.print(root.data+" ");
            preOrder(root.left);
            preOrder(root.right);

        }
        static void inOrder(Node root){
            if(root==null){
                System.out.print("-1 ");
                return;
            }
            preOrder(root.left);
            System.out.print(root.data+" ");
            preOrder(root.right);
        }

        static void postOrder(Node root){
            if(root==null){
                System.out.print("-1 ");
                return;
            }
            preOrder(root.left);
            preOrder(root.right);
            System.out.print(root.data+" ");
        }
        static void levelOrder(Node root){
            Queue<Node> q = new LinkedList<>();
            q.add(root);
            q.add(null);
            while(!q.isEmpty()){
                Node curr = q.remove();
                if(curr==null){
                    if(q.isEmpty()){
                        break;
                    }
                    else{
                        System.out.println();
                        q.add(null);
                    }
                }else{
                    System.out.print(curr.data+" ");
                    if(curr.left!=null){
                        q.add(curr.left);
                    }
                    if(curr.right!=null){
                        q.add(curr.right);
                    }
                }
            }
        }
    }
    public static void main(String[] args){
        int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        BinaryTree tree = new BinaryTree();
        Node n = tree.treeBuilder(nodes);
        tree.preOrder(n);
        System.out.println();
        tree.inOrder(n);
        System.out.println();
        tree.postOrder(n);
        System.out.println();
        tree.levelOrder(n);


    }
}
